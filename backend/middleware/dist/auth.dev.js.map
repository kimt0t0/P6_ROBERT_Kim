{"version":3,"sources":["auth.js"],"names":["jwt","require","module","exports","req","res","next","token","headers","authorization","split","decodedToken","verify","userId","body","error","status","json","Error"],"mappings":";;AAAA;AACA;;AAEA;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;AAGA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,MAAI;AACA,QAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd,CADA,CACuD;;AACvD,QAAMC,YAAY,GAAGX,GAAG,CAACY,MAAJ,CAAWL,KAAX,EAAkB,qBAAlB,CAArB,CAFA,CAE+D;;AAC/D,QAAMM,MAAM,GAAGF,YAAY,CAACE,MAA5B,CAHA,CAG4C;;AAC5C,QAAIT,GAAG,CAACU,IAAJ,CAASD,MAAT,IAAmBT,GAAG,CAACU,IAAJ,CAASD,MAAT,KAAoBA,MAA3C,EAAmD;AAAE;AACjD,YAAM,uBAAN;AACH,KAFD,MAEO;AACHP,MAAAA,IAAI;AACP;AACJ,GATD,CASE,OAAMS,KAAN,EAAY;AACVV,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEF,MAAAA,KAAK,EAAE,IAAIG,KAAJ,CAAU,mBAAV;AAAT,KAArB;AACH;AACJ,CAbD","sourcesContent":["/* *** MIDDLEWARE D'AUTHENTIFICATION *** */\r\n//sert à vérifier que l'utilisateur est connecté et transmettre les infos de connexion lors des requêtes\r\n\r\n/* VARIABLES */\r\nconst jwt = require('jsonwebtoken');\r\n\r\n\r\n/* ACTIONS */\r\nmodule.exports = (req, res, next) => {\r\n    try {\r\n        const token = req.headers.authorization.split(' ')[1]; // on récupère le token de la requête entrante\r\n        const decodedToken = jwt.verify(token, 'RANDOM_TOKEN_SECRET'); // on le vérifie\r\n        const userId = decodedToken.userId;         // on récupère l'id du token\r\n        if (req.body.userId && req.body.userId !== userId) { // on compare le userid de la requête à celui du token\r\n            throw 'User id non valable !';\r\n        } else {\r\n            next();\r\n        }\r\n    } catch(error){\r\n        res.status(401).json({ error: new Error('Invalid request !')});\r\n    }\r\n};"],"file":"auth.dev.js"}