{"version":3,"sources":["auth.js"],"names":["jwt","require","module","exports","req","res","next","token","headers","split","userId","verify","authorization","body","decodedToken","status","json","error","Error"],"mappings":"aAIA,IAAMA,IAAMC,QAAQ,gBAIpBC,OAAOC,QAAU,SAACC,EAAKC,EAAKC,GACxB,IADGH,IAAPI,EAAiBH,EAAAI,QAAMH,cAAcI,MAAA,KAAA,GAElBC,EADXV,IAAAW,OAAAJ,EAAA,uBAC0BK,OAG1B,GAAIR,EAAIS,KAAKH,QAAUN,EAAIS,KAAKH,SAAWA,EAFrCI,KAAAA,wBACAJ,IACN,MAAQG,GAA6CR,EAAAU,OAAA,KAAAC,KAAA,CAAAC,MAAA,IAAAC,MAAA","file":"auth.min.js","sourcesContent":["/* *** MIDDLEWARE D'AUTHENTIFICATION *** */\r\n//sert à vérifier que l'utilisateur est connecté et transmettre les infos de connexion lors des requêtes\r\n\r\n/* VARIABLES */\r\nconst jwt = require('jsonwebtoken');\r\n\r\n\r\n/* ACTIONS */\r\nmodule.exports = (req, res, next) => {\r\n    try {\r\n        const token = req.headers.authorization.split(' ')[1]; // on récupère le token de la requête entrante\r\n        const decodedToken = jwt.verify(token, 'RANDOM_TOKEN_SECRET'); // on le vérifie\r\n        const userId = decodedToken.userId;         // on récupère l'id du token\r\n        if (req.body.userId && req.body.userId !== userId) { // on compare le userid de la requête à celui du token\r\n            throw 'User id non valable !';\r\n        } else {\r\n            next();\r\n        }\r\n    } catch(error){\r\n        res.status(401).json({ error: new Error('Invalid request !')});\r\n    }\r\n};"]}