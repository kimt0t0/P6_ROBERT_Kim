{"version":3,"sources":["auth.js"],"names":["jwt","require","module","exports","req","res","next","token","headers","authorization","split","userId","error","auth","status","json"],"mappings":"aAIA,IAAMA,IAAMC,QAAQ,gBAEpBC,OAAAC,QAAA,SAAAC,EAAAC,EAAAC,GAEI,IACI,IAAMC,EAAQH,EAAII,QAAQC,cAAcC,MAAM,KAAK,GADnDC,EADUP,IAAKC,OAAKC,EAAS,uBAC7BK,OACMJ,EAAAA,KAAW,CAIbI,OAAQA,GAEZL,IAEJ,MAAMM,GALEC,EAAJC,OAAW,KAAAC,KAAA,CAAAH,MAAAA","file":"auth.min.js","sourcesContent":["/* *** MIDDLEWARE D'AUTHENTIFICATION *** */\r\n//sert à vérifier que l'utilisateur est connecté et transmettre les infos de connexion lors des requêtes\r\n\r\n/* VARIABLES */\r\nconst jwt = require('jsonwebtoken');\r\n\r\n/* ACTIONS */\r\nmodule.exports = (req, res, next) => {\r\n    try {\r\n        const token = req.headers.authorization.split(' ')[1]; // récupération du token dans le header de la requête\r\n        const decodedToken = jwt.verify(token, 'RANDOM_SECRET_TOKEN'); // décodage token\r\n        const userId = decodedToken.userId; // récupération id utilisateur et ajout à l'objet Request pour que les routes puissent l'utiliser\r\n        req.auth = {\r\n            userId: userId\r\n        };\r\n        next();\r\n    }\r\n    catch(error) {\r\n        res.status(401).json({error});\r\n    }\r\n};"]}