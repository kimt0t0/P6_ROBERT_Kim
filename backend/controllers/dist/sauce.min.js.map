{"version":3,"sources":["sauce.js"],"names":["Sauce","require","fs","exports","createSauce","req","res","next","sauceObject","JSON","parse","body","sauce","_id","_userId","_objectSpread","userId","auth","imageURL","concat","protocol","get","file","filename","then","status","json","message","error","thing","imageUrl","log","findOne","params","id","modifySauce","split","unlink","deleteOne"],"mappings":"wuBAGA,IAAMA,MAAQC,QAAQ,mBAChBC,GAAKD,QAAQ,MAFnBE,QAAAC,YAAA,SAAAC,EAAAC,EAAAC,GACMP,IAAKQ,EAAWC,KAAAC,MAAAL,EAAtBM,KAAAC,cASWJ,EAAYK,WARZZ,EAAXa,QAGA,IAAAF,EAAA,IAAAZ,MAAAe,cAAA,GAQWP,EARX,CAEAQ,OAAAX,EAAAY,KAAAD,OAQQE,SAAQ,GAAAC,OAAKd,EAAIe,SAAT,OAAAD,OAAuBd,EAAIgB,IAAI,QAA/B,YAAAF,OAAiDd,EAAIiB,KAAKC,aANtEX,EAAMJ,OAENgB,KAAOhB,WACDI,EAAKa,OAAOzB,KAAJ0B,KAAA,CAAAC,QAAA,kBAHd,MAMY,SAAAC,GAHZtB,EAAAmB,OAAA,KAAAC,KAAA,CAAAE,MAAAA,MASItB,QAAImB,IAAOb,IAGXN,QAAImB,YAAYC,SAAAA,EAAKpB,EAAAC,GAACqB,IAAAA,EAAAA,EAAAA,KAAAA,cAAAA,GAAtBnB,KAAAC,MAAAL,EAAAM,KAAAkB,OAAsBD,CAN1BE,SAAA,GAAAX,OAAAd,EAAAe,SAAA,OAAAD,OAAAd,EAAAgB,IAAA,QAAA,YAAAF,OAAAd,EAAAiB,KAAAC,YAM0BK,cAAAA,GAElBG,EAAInB,aAGhBJ,EAAAM,QAQId,MAAMgC,QAAQ,CAACnB,IAAKR,EAAI4B,OAAOC,KAC1BV,KAAK,SAACZ,GARPuB,EAAcnB,QAACX,EAADY,KAAAD,OACZR,EAAcH,OAAIiB,KAAJI,KAAA,CAAAC,QAAA,mBAKbnB,MAAYM,UAAnB,CAAAD,IAAAR,EAAA4B,OAAAC,IAAO1B,cAAAA,GAAPA,EAAOA,CAAPK,IAAAR,EAAA4B,OAAAC,MACcV,KAAA,WAAA,OAAAlB,EAAAmB,OAAA,KAAAC,KAAA,CAAAC,QAAA,uBADPnB,MACwB0B,SAAAA,GAAAA,OAAAA,EAAAA,OAAAA,KAAAA,KAAAA,CAAAA,MAAAA,QAA/B,MAGgBT,SAAAA,GAAJ,OAAgBC,EAAKD,OAAA,KAAAC,KAAA,CAAAE,MAAAA,OAGrB5B,QAAAA,YAAgB,SAAAK,EAAAC,EAAAC,GAACM,MAAAA,QAASoB,CAAAA,IAAOC,EAAAA,OAAAA,KAAjCV,KAAA,SAAAZ,GAA0D,GAAKA,EAACqB,QAAOC,EAAAA,KAAAA,OAC7D5B,EAAAmB,OAAA,KAAAC,KAAA,CAAAC,QAAA,uBAAUF,CAAkBE,IAASJ,EAAAM,MAAAC,SAAAM,MAAA,YAAA,GAArClC,GAAAmC,OAAA,UAAAlB,OAAAI,GAAA,WACCvB,MAAAsC,UAAK,CAAAzB,IAAAR,EAAA4B,OAAAC,KAAIV,KAAA,WAAqBlB,EAAAmB,OAAA,KAAAC,KAAA,CAAAC,QAAA,uBAA9B,MAA+BC,SAAAA,GAAAA,OAAAA,EAAAA,OAAAA,KAAAA,KAAAA,CAAAA,MAAAA,WAFzBf,MAKlB,SAAAe,GAAStB,EAAImB,OAAO,KAAKC,KAAK,CAAAE,MAAAA","file":"sauce.min.js","sourcesContent":["/* *** SAUCE CONTROLLER *** */\r\n\r\n/* VARIABLES */\r\nconst Sauce = require('../models/Sauce');\r\nconst fs = require('fs');\r\n\r\n\r\n/* FONCTIONS */\r\n\r\n/* Création sauce: */\r\nexports.createSauce = (req, res, next) => {\r\n    const sauceObject = JSON.parse(req.body.sauce);\r\n    delete sauceObject._id;\r\n    delete sauceObject._userId;\r\n    const sauce = new Sauce ({\r\n        ...sauceObject,\r\n        userId: req.auth.userId,\r\n        imageURL: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`,\r\n    });\r\n\r\n    sauce.save()\r\n\r\n    .then( () => {\r\n        res.status(201).json({message: 'Sauce saved'})\r\n    })\r\n    .catch( error => {\r\n        res.status(400).json({error})\r\n    })\r\n    console.log(sauce);\r\n};\r\n\r\n/* Modification sauce: */\r\nexports.modifySauce = (req, res, next) => {\r\n    const sauceObject = req.file ? {\r\n        ...JSON.parse(req.body.thing),\r\n        imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`\r\n    } : {...req.body};\r\n\r\n    delete sauceObject._userId;\r\n    Sauce.findOne({_id: req.params.id})\r\n        .then((sauce) => {\r\n            if (sauce.userId != req.auth.userId) {\r\n                res.status(401).json({message: 'Not authorized'});\r\n            }\r\n            else {\r\n                Sauce.updateOne({_id: req.params.id}, {...sauceObject, _id: req.params.id})\r\n                    .then(() => res.status(200).json({message: 'Object modified!'}))\r\n                    .catch(error => res.status(401).json({error}));\r\n            }\r\n        })\r\n        .catch(error => res.status(400).json({error}));\r\n};\r\n\r\n/* Suppression sauce: */\r\nexports.deleteSauce = (req, res, next) => {\r\n    Sauce.findOne({ _id: req.params.id}) // utilisation de l'idée pour accéder à la sauce dans la bdd\r\n        .then(sauce => {\r\n            if (sauce.userId != req.auth.userId) { // vérification si utilisateur <-> créateur\r\n                res.status(401).json({message: 'Not authorized'});\r\n            } else {\r\n                const filename = thing.imageUrl.split('/images/')[1]; // récupération nom fichier dans url image\r\n                fs.unlink(`images/${filename}`, () => { //suppression du fichier et callback à exécuter ensuite\r\n                    Sauce.deleteOne({_id: req.params.id})\r\n                        .then(() => { res.status(200).json({message: 'Objet supprimé !'})})\r\n                        .catch(error => res.status(401).json({ error }));\r\n                });\r\n            }\r\n        })\r\n        .catch( error => {\r\n            res.status(500).json({ error });\r\n        });\r\n };"]}