{"version":3,"sources":["user.js"],"names":["User","require","jwt","exports","signup","req","res","next","bcrypt","hash","body","password","then","email","save","status","json","error","login","user","message","compare","valid","userId","_id","token","sign","expiresIn"],"mappings":"aACA,IAAMA,KAAOC,QAAQ,kBADrBC,IAAAD,QAAA,gBAIAE,QAAAC,OAAA,SAAAC,EAAAC,EAAAC,GAGIC,OAAOC,KAAKJ,EAAIK,KAAKC,SAAU,IAFnCC,KAAA,SAAAH,GAIyB,IAAIT,KAAK,CAClBa,MAAOR,EAAIK,KAAKG,MAJhCF,SAAiBF,IAEHK,OAAUF,KAAA,WACKZ,EAAKe,OAAA,KAAAC,KAAA,CACFH,QADE,yBADpB,MAKU,SAAAI,GACFX,EAAMS,OAAA,KAAAC,KAAA,CAAAC,MAAAA,QAPxB,MAQgB,SAAAA,GAFRX,EAMWS,OAAA,KAAAE,KAAS,CAAAA,MAAAA,OAGvBd,QAfLe,MAgBW,SAAAb,EAAAC,EAAAW,GACHX,KAAIS,QAAO,CAAXF,MAAqBR,EAAAK,KAAAG,QAACI,KAAAA,SAAAA,GAAtB,IAAAE,EAjBR,OAAAb,EAAAS,OAAA,KAAAC,KAAA,CADJI,QAAA,wCA+BYZ,OAAOa,QAAQhB,EAAIK,KAAKC,SAAUQ,EAAKR,UARnCC,KAAA,SAAAU,GACC,IAAAA,EAAiBT,OAAAA,EAAAA,OAAAA,KAAAA,KAAAA,CACZO,QAAA,wCAGOd,EAAAS,OAAA,KAAAC,KAAA,CADbO,OAAAJ,EAAAK,IAGHC,MAAAvB,IAAAwB,KAWe,CAACH,OAAQJ,EAAKK,KAVNb,sBAEJ,CAAAgB,UAAA,YAFpB,MAMS,SAAAV,GAWDX,EAAIS,OAAO,KAAKC,KAAK,CAACC,MAAAA,QA9B9BX,MAsBmBJ,SAAAA,GAAIwB,OAAJpB,EAAUS,OAAA,KAAAC,KAAA,CAAAC,MAAAA","file":"user.min.js","sourcesContent":["/* VARIABLES */\r\nconst User = require('../models/User');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n/* FONCTIONS */\r\n/* Inscription */\r\nexports.signup = (req, res, next) => {\r\n    bcrypt.hash(req.body.password, 10) // async func de cryptage mot de passe (avec hachage x10)\r\n        .then(hash => { // création utilisateur\r\n            const user = new User({\r\n                email: req.body.email,\r\n                password: hash\r\n            });\r\n            user.save() // enregistrement utilisateur sur bdd\r\n                .then(() => {\r\n                    res.status(201).json({\r\n                        message: 'Utilisateur créé !'\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    res.status(400).json({error})\r\n                });\r\n        })\r\n        .catch(error => {\r\n            res.status(500).json({error})\r\n        });\r\n};\r\n\r\n/* Connexion */\r\nexports.login = (req, res, next) => {\r\n    User.findOne({email: req.body.email})\r\n        .then(user => {\r\n            if (!user) {\r\n                return res.status(401).json({\r\n                    message: 'Paire login/mot de passe incorrecte'\r\n                });\r\n            }\r\n            bcrypt.compare(req.body.password, user.password)\r\n                .then(valid => {\r\n                    if (!valid) {\r\n                        return res.status(401).json({\r\n                            message: 'Paire login/mot de passe incorrecte'\r\n                        });\r\n                    }\r\n                    res.status(200).json({\r\n                        userId: user._id,\r\n                        token: jwt.sign( // chiffrage nouveau token qui contient:\r\n                            {userId: user._id}, // id utilisateur\r\n                            'RANDOM_TOKEN_SECRET', // chaîne secrète de dev temporaire pour crypter le token\r\n                            {expiresIn: '24h'} // durée de validité\r\n                        )\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    res.status(500).json({error})\r\n                });\r\n        })\r\n        .catch(error => res.status(500).json({error}));\r\n};"]}