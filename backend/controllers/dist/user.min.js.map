{"version":3,"sources":["user.js"],"names":["User","require","bcrypt","emailValidator","MaskData","passwordSchema","passwordValidator","is","min","has","uppercase","digits","spaces","exports","not","res","next","validate","req","body","email","password","status","json","message","signup","maskedMail","maskEmail2","then","user","hash","error","login","valid","userId","_id","token","jwt","sign","expiresIn"],"mappings":"aACA,IAAMA,KAAOC,QAAQ,kBADrBC,OAAAD,QAAA,UACMD,IAAOC,QAAQ,gBAGfE,eAAiBF,QAAQ,mBAFzBC,kBAAiBD,QAAvB,sBAIMG,SAAWH,QAAQ,YAEnBI,eAAiB,IAAIC,kBAJ3BD,eAOKE,KAAKC,IAAI,GANRF,GAAAA,IAAAA,IAQDG,MAAMC,YAPLN,MAAAA,YASDK,MAAME,SAPLN,MAAAA,MAAAA,UAENA,MAAAA,MAAAO,SAAAC,QAOWC,OAAMF,SAAAA,EAPjBG,EAAAC,GASA,IAAAb,eAAAc,SAAAC,EAAAC,KAAAC,SAAAf,eAAAY,SAAAC,EAAAC,KAAAE,UAIQ,OAAON,EAAIO,OAAO,KAAKC,KAAK,CAACC,QAAS,2OAErC,GAAIrB,eAAec,SAASC,EAAIC,KAAKC,QAAUf,eAAeY,SAASC,EAAIC,KAAKE,UAAW,CAJ5FI,IAARC,EAAkBR,SAADS,WAAoBT,EAAAC,KAAAC,OAC5BjB,OAAAA,KAAAA,EAAec,KAAAA,SAAS,IACzBW,KAAWN,SAAAA,GAA2B,IAAAtB,KAAA,CAAtCoB,MAAAM,EAEKvB,SAAAA,IAEOe,OAEFW,KAAO,SAAAC,GAAI9B,OAAMe,EAAAO,OAAA,KAAAC,KAAA,CAAAC,QAAA,wBAFpBM,MAGQJ,SAAAA,GAAAA,OADYX,EAAAO,OAAA,KAAAC,KAAA,CAAAQ,MAAAA,QAP1B5B,MAOG,SAAA4B,GAAA,OAAAhB,EAAAO,OAAA,KAAAC,KAAA,CAAAQ,MAAAA,QAKUlB,QADVmB,MAAA,SAAAd,EAEOH,EAAAC,GAAK,IAAAU,EAAQJ,SAAYC,WAAKL,EAAAC,KAAAC,OAACW,KAAAA,QAAAA,CAAAA,MAAAA,IAADH,KAAzB,SAAAC,GAFZ,IAAAA,EANJ,OAUOd,EAAAO,OAAAS,KAAKR,KAAA,CAAAQ,MAAA,4BAA0BA,OAAAA,QAAAA,EAAAA,KAAAA,SAAAA,EAAAA,UAA1BH,KAAA,SAAAK,GAVZ,IAAAA,EAWH,OAAAlB,EAAAO,OAAA,KAAAC,KAAA,CAAAQ,MAAA,4BAAAhB,EAAAO,OAAA,KAAAC,KAAA,CAjBLW,OAAAL,EAAAM,IAoBAC,MAAAC,IAAAC,KAgBoB,CAACJ,OAAQL,EAAKM,KACd,sBAhBJ,CAAAI,UAAMxB,YALwBgB,MAOR,SAAAA,GAAA,OAAAhB,EAAAO,OAAA,KAAAC,KAAA,CAAAQ,MAAAA,QATYA,MAWtCF,SAAAA,GAAM,OAAAd,EAAAO,OAAA,KAAAC,KAAA,CAAAQ,MAAAA","file":"user.min.js","sourcesContent":["/* VARIABLES */\r\nconst User = require('../models/User');\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken'); //token generation\r\nconst emailValidator = require('email-validator');\r\nconst passwordValidator = require('password-validator');\r\nconst MaskData = require('maskdata');\r\n\r\nconst passwordSchema = new passwordValidator();\r\n\r\npasswordSchema\r\n    .is().min(8)  //min length\r\n    .is.max(50) //max length\r\n    .has().uppercase()  //must have...\r\n    .has().lowercase()\r\n    .has().digits()\r\n    .has().not().symbols() // must not have...\r\n    .has().not().spaces();\r\n\r\n/* FONCTIONS */\r\n/* Sign-Up */\r\nexports.signup = (req, res, next) => {\r\n    if (!emailValidator.validate(req.body.email) || !passwordSchema.validate(req.body.password)) {\r\n        return res.status(400).json({message: 'Veuillez vérifier le format de votre adresse e-mail ainsi que votre mot-de-passe. Il doit comporter minimum 8 caractères et contenir des minuscules, majuscules et chiffres. Les espaces et caractères spéciaux ne sont pas autorisés.'})\r\n    } \r\n    else if (emailValidator.validate(req.body.email) || passwordSchema.validate(req.body.password)) {\r\n        const maskedMail = MaskData.maskEmail2(req.body.email);\r\n        bcrypt.hash(req.body.password, 10)\r\n        .then (hash => {\r\n            const user = new User ({\r\n                email: maskedMail,\r\n                password: hash\r\n            });\r\n            user.save()\r\n            .then(hash => res.status(201).json({message: 'Utilisateur créé!'}))\r\n            .catch(error => res.status(400).json({error}))\r\n        })\r\n        .catch(error => res.status(500).json({error}))\r\n    };\r\n};\r\n\r\n/* Log-in */\r\nexports.login = (req, res, next) => {\r\n    const maskedMail = MaskData.maskEmail2(req.body.email);\r\n    User.findOne({email: maskedMail}) // check if the address is in the data-base\r\n    .then(user => {\r\n        if(!user) {\r\n            return res.status(401).json({error: 'Utilisateur non trouvé!'});\r\n        }\r\n        bcrypt.compare(req.body.password, user.password) //compares the hashes\r\n        .then (valid => {\r\n            if (!valid) {\r\n                return res.status(401).json({error: 'Mot de passe incorrect!'});\r\n            }\r\n            res.status(200).json({\r\n                userId: user._id,\r\n                token: jwt.sign(\r\n                    {userId: user._id},\r\n                    'RANDOM_SECRET_TOKEN',\r\n                    {expiresIn: '24h'}\r\n                )\r\n            })\r\n        })\r\n        .catch(error => res.status(500).json({error}));\r\n    })\r\n    .catch(error => res.status(500).json({error}));\r\n};"]}