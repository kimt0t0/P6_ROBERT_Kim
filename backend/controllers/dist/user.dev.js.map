{"version":3,"sources":["user.js"],"names":["User","require","bcrypt","jwt","emailValidator","passwordValidator","MaskData","passwordSchema","is","min","max","has","uppercase","lowercase","digits","not","symbols","spaces","exports","signup","req","res","next","validate","body","email","password","status","json","message","maskedMail","maskEmail2","hash","then","user","save","error","login","findOne","compare","valid","userId","_id","token","sign","expiresIn"],"mappings":"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","sourcesContent":["/* VARIABLES */\r\nconst User = require('../models/User');\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken'); //token generation\r\nconst emailValidator = require('email-validator');\r\nconst passwordValidator = require('password-validator');\r\nconst MaskData = require('maskdata');\r\n\r\nconst passwordSchema = new passwordValidator();\r\n\r\npasswordSchema\r\n    .is().min(8)  //min length\r\n    .is.max(50) //max length\r\n    .has().uppercase()  //must have...\r\n    .has().lowercase()\r\n    .has().digits()\r\n    .has().not().symbols() // must not have...\r\n    .has().not().spaces();\r\n\r\n/* FONCTIONS */\r\n/* Sign-Up */\r\nexports.signup = (req, res, next) => {\r\n    if (!emailValidator.validate(req.body.email) || !passwordSchema.validate(req.body.password)) {\r\n        return res.status(400).json({message: 'Veuillez vérifier le format de votre adresse e-mail ainsi que votre mot-de-passe. Il doit comporter minimum 8 caractères et contenir des minuscules, majuscules et chiffres. Les espaces et caractères spéciaux ne sont pas autorisés.'})\r\n    } \r\n    else if (emailValidator.validate(req.body.email) || passwordSchema.validate(req.body.password)) {\r\n        const maskedMail = MaskData.maskEmail2(req.body.email);\r\n        bcrypt.hash(req.body.password, 10)\r\n        .then (hash => {\r\n            const user = new User ({\r\n                email: email,\r\n                password: hash\r\n            });\r\n            user.save()\r\n            .then(hash => res.status(201).json({message: 'Utilisateur créé!'}))\r\n            .catch(error => res.status(400).json({error}))\r\n        })\r\n        .catch(error => res.status(500).json({error}))\r\n    };\r\n};\r\n\r\n/* Connexion */\r\nexports.login = (req, res, next) => {\r\n    User.findOne({email: req.body.email})\r\n        .then(user => {\r\n            if (!user) {\r\n                return res.status(401).json({\r\n                    message: 'Paire login/mot de passe incorrecte'\r\n                });\r\n            }\r\n            bcrypt.compare(req.body.password, user.password)\r\n                .then(valid => {\r\n                    if (!valid) {\r\n                        return res.status(401).json({\r\n                            message: 'Paire login/mot de passe incorrecte'\r\n                        });\r\n                    }\r\n                    res.status(200).json({\r\n                        userId: user._id,\r\n                        token: jwt.sign( // chiffrage nouveau token qui contient:\r\n                            {userId: user._id}, // id utilisateur\r\n                            'RANDOM_TOKEN_SECRET', // chaîne secrète de dev temporaire pour crypter le token\r\n                            {expiresIn: '24h'} // durée de validité\r\n                        )\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    res.status(500).json({error})\r\n                });\r\n        })\r\n        .catch(error => res.status(500).json({error}));\r\n};"],"file":"user.dev.js"}