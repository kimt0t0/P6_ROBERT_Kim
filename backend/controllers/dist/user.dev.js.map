{"version":3,"sources":["user.js"],"names":["User","require","jwt","exports","signup","req","res","next","bcrypt","hash","body","password","then","user","email","save","status","json","message","error","login","findOne","compare","valid","userId","_id","token","sign","expiresIn"],"mappings":";;AAAA;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;AAEA;;AACA;;;AACAE,OAAO,CAACC,MAAR,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjCC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,GAAG,CAACK,IAAJ,CAASC,QAArB,EAA+B,EAA/B,EAAmC;AAAnC,GACKC,IADL,CACU,UAAAH,IAAI,EAAI;AAAE;AACZ,QAAMI,IAAI,GAAG,IAAIb,IAAJ,CAAS;AAClBc,MAAAA,KAAK,EAAET,GAAG,CAACK,IAAJ,CAASI,KADE;AAElBH,MAAAA,QAAQ,EAAEF;AAFQ,KAAT,CAAb;AAIAI,IAAAA,IAAI,CAACE,IAAL,GAAY;AAAZ,KACKH,IADL,CACU,YAAM;AACRN,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,QAAAA,OAAO,EAAE;AADQ,OAArB;AAGH,KALL,WAMW,UAAAC,KAAK,EAAI;AACZb,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACE,QAAAA,KAAK,EAALA;AAAD,OAArB;AACH,KARL;AASH,GAfL,WAgBW,UAAAA,KAAK,EAAI;AACZb,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACE,MAAAA,KAAK,EAALA;AAAD,KAArB;AACH,GAlBL;AAmBH,CApBD;AAsBA;;;AACAhB,OAAO,CAACiB,KAAR,GAAgB,UAACf,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChCP,EAAAA,IAAI,CAACqB,OAAL,CAAa;AAACP,IAAAA,KAAK,EAAET,GAAG,CAACK,IAAJ,CAASI;AAAjB,GAAb,EACKF,IADL,CACU,UAAAC,IAAI,EAAI;AACV,QAAI,CAACA,IAAL,EAAW;AACP,aAAOP,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,QAAAA,OAAO,EAAE;AADe,OAArB,CAAP;AAGH;;AACDV,IAAAA,MAAM,CAACc,OAAP,CAAejB,GAAG,CAACK,IAAJ,CAASC,QAAxB,EAAkCE,IAAI,CAACF,QAAvC,EACKC,IADL,CACU,UAAAW,KAAK,EAAI;AACX,UAAI,CAACA,KAAL,EAAY;AACR,eAAOjB,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,UAAAA,OAAO,EAAE;AADe,SAArB,CAAP;AAGH;;AACDZ,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBO,QAAAA,MAAM,EAAEX,IAAI,CAACY,GADI;AAEjBC,QAAAA,KAAK,EAAExB,GAAG,CAACyB,IAAJ,EAAU;AACb;AAACH,UAAAA,MAAM,EAAEX,IAAI,CAACY;AAAd,SADG,EACiB;AACpB,6BAFG,EAEoB;AACvB;AAACG,UAAAA,SAAS,EAAE;AAAZ,SAHG,CAGgB;AAHhB;AAFU,OAArB;AAQH,KAfL,WAgBW,UAAAT,KAAK,EAAI;AACZb,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACE,QAAAA,KAAK,EAALA;AAAD,OAArB;AACH,KAlBL;AAmBH,GA1BL,WA2BW,UAAAA,KAAK;AAAA,WAAIb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACE,MAAAA,KAAK,EAALA;AAAD,KAArB,CAAJ;AAAA,GA3BhB;AA4BH,CA7BD","sourcesContent":["/* VARIABLES */\r\nconst User = require('../models/User');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n/* FONCTIONS */\r\n/* Inscription */\r\nexports.signup = (req, res, next) => {\r\n    bcrypt.hash(req.body.password, 10) // async func de cryptage mot de passe (avec hachage x10)\r\n        .then(hash => { // création utilisateur\r\n            const user = new User({\r\n                email: req.body.email,\r\n                password: hash\r\n            });\r\n            user.save() // enregistrement utilisateur sur bdd\r\n                .then(() => {\r\n                    res.status(201).json({\r\n                        message: 'Utilisateur créé !'\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    res.status(400).json({error})\r\n                });\r\n        })\r\n        .catch(error => {\r\n            res.status(500).json({error})\r\n        });\r\n};\r\n\r\n/* Connexion */\r\nexports.login = (req, res, next) => {\r\n    User.findOne({email: req.body.email})\r\n        .then(user => {\r\n            if (!user) {\r\n                return res.status(401).json({\r\n                    message: 'Paire login/mot de passe incorrecte'\r\n                });\r\n            }\r\n            bcrypt.compare(req.body.password, user.password)\r\n                .then(valid => {\r\n                    if (!valid) {\r\n                        return res.status(401).json({\r\n                            message: 'Paire login/mot de passe incorrecte'\r\n                        });\r\n                    }\r\n                    res.status(200).json({\r\n                        userId: user._id,\r\n                        token: jwt.sign( // chiffrage nouveau token qui contient:\r\n                            {userId: user._id}, // id utilisateur\r\n                            'RANDOM_TOKEN_SECRET', // chaîne secrète de dev temporaire pour crypter le token\r\n                            {expiresIn: '24h'} // durée de validité\r\n                        )\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    res.status(500).json({error})\r\n                });\r\n        })\r\n        .catch(error => res.status(500).json({error}));\r\n};"],"file":"user.dev.js"}