{"version":3,"sources":["server.js"],"names":["http","require","app","dotenv","config","normalizePort","val","port","parseInt","isNaN","errorHandler","error","syscall","address","server","bind","code","console","process","exit","env","PORT","set","createServer","on","log","listen"],"mappings":";;AAAA;;AAEA;AAEA;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAP,CAAkBG,MAAlB,EAAf,C,CAA2C;;AAG3C;AAEA;;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,GAAG,EAAI;AACzB,MAAMC,IAAI,GAAGC,QAAQ,CAACF,GAAD,EAAM,EAAN,CAArB;;AAEA,MAAIG,KAAK,CAACF,IAAD,CAAT,EAAiB;AACb,WAAOD,GAAP;AACH;;AACD,MAAIC,IAAI,IAAI,CAAZ,EAAe;AACX,WAAOA,IAAP;AACH;;AACD,SAAO,KAAP;AACH,CAVD,C,CAYA;;;AACA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAC1B,MAAIA,KAAK,CAACC,OAAN,KAAkB,QAAtB,EAAgC;AAC5B,UAAMD,KAAN;AACH;;AACD,MAAME,OAAO,GAAGC,MAAM,CAACD,OAAP,EAAhB;AACA,MAAME,IAAI,GAAG,OAAOF,OAAP,KAAmB,QAAnB,GAA8B,SAASA,OAAvC,GAAiD,WAAWN,IAAzE;;AACA,UAAQI,KAAK,CAACK,IAAd;AACI,SAAK,QAAL;AACIC,MAAAA,OAAO,CAACN,KAAR,CAAcI,IAAI,GAAG,+BAArB;AACAG,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACA;;AACJ,SAAK,YAAL;AACIF,MAAAA,OAAO,CAACN,KAAR,CAAcI,IAAI,GAAG,qBAArB;AACAG,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACA;;AACJ;AACI,YAAMR,KAAN;AAVR;AAYH,CAlBD;AAoBA;AACA;;;AACA,IAAMJ,IAAI,GAAGF,aAAa,CAACa,OAAO,CAACE,GAAR,CAAYC,IAAZ,IAAoB,MAArB,CAA1B,C,CACA;;AACAnB,GAAG,CAACoB,GAAJ,CAAQ,MAAR,EAAgBf,IAAhB,E,CACA;;AACA,IAAMO,MAAM,GAAGd,IAAI,CAACuB,YAAL,CAAkBrB,GAAlB,CAAf;AAEAY,MAAM,CAACU,EAAP,CAAU,OAAV,EAAmBd,YAAnB;AACAI,MAAM,CAACU,EAAP,CAAU,WAAV,EAAuB,YAAM;AACzB,MAAMX,OAAO,GAAGC,MAAM,CAACD,OAAP,EAAhB;AACA,MAAME,IAAI,GAAG,OAAOF,OAAP,KAAmB,QAAnB,GAA8B,UAAUA,OAAxC,GAAkD,UAAUN,IAAzE;AACAU,EAAAA,OAAO,CAACQ,GAAR,CAAY,kBAAkBV,IAA9B;AACH,CAJD;AAMAD,MAAM,CAACY,MAAP,CAAcnB,IAAd","sourcesContent":["/* *** ECRITURE DU SERVEUR ET APPEL DE L'APP *** */\r\n\r\n/* VARIABLES */\r\n\r\n// Importation de http et de l'app\r\nconst http = require('http');\r\nconst app = require('./app');\r\nconst dotenv = require('dotenv').config(); // nécessaire pour faire fonctionner serveur node, doc ici: https://www.freecodecamp.org/news/how-to-use-node-environment-variables-with-a-dotenv-file-for-node-js-and-npm/\r\n\r\n\r\n/* FONCTIONS */\r\n\r\n// Obtention d'un port valide:\r\nconst normalizePort = val => {\r\n    const port = parseInt(val, 10);\r\n\r\n    if (isNaN(port)) {\r\n        return val;\r\n    }\r\n    if (port >= 0) {\r\n        return port;\r\n    }\r\n    return false;\r\n};\r\n\r\n// Gestion des erreurs:\r\nconst errorHandler = error => {\r\n    if (error.syscall !== 'listen') {\r\n        throw error;\r\n    }\r\n    const address = server.address();\r\n    const bind = typeof address === 'string' ? 'pipe' + address : 'port: ' + port;\r\n    switch (error.code) {\r\n        case 'EACCES':\r\n            console.error(bind + 'requires elevated privileges.');\r\n            process.exit(1);\r\n            break;\r\n        case 'EADDRINUSE':\r\n            console.error(bind + ' is already in use.');\r\n            process.exit(1);\r\n            break;\r\n        default:\r\n            throw error;\r\n    }\r\n};\r\n\r\n/* ACTIONS */\r\n// Obtention du port:\r\nconst port = normalizePort(process.env.PORT || '3000');\r\n// Démarrage appli:\r\napp.set('port', port);\r\n// Création serveur:\r\nconst server = http.createServer(app);\r\n\r\nserver.on('error', errorHandler);\r\nserver.on('listening', () => {\r\n    const address = server.address();\r\n    const bind = typeof address === 'string' ? 'pipe ' + address : 'port ' + port;\r\n    console.log('Listening on ' + bind);\r\n});\r\n\r\nserver.listen(port);"],"file":"server.dev.js"}