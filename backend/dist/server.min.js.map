{"version":3,"sources":["server.js"],"names":["http","require","dotenv","config","normalizePort","val","port","parseInt","isNaN","errorHandler","error","syscall","address","server","console","bind","process","exit","env","PORT","app","set","createServer","on","listen"],"mappings":"aAIA,IAAAA,KAAAC,QAAA,QACMD,IAAOC,QAAQ,SAEfC,OAASD,QAAQ,UAAUE,SAKjCC,cAAA,SAAAC,GAEI,IAAMC,EAAOC,SAASF,EAAK,IADzBD,OAAAA,MAAAA,GACWG,EAEJ,GAALC,GACAF,GASFG,aAAe,SAAAC,GAJjB,GAAA,WAAAA,EAAAC,QAGJ,MAAAD,EAKI,IAAME,EAAUC,OAAOD,UAJrBH,EAAAA,iBAAeG,EAAK,OAAIA,EAAA,SAAAN,KAC1B,OAAUK,EAAAA,MACN,IAAMD,SACTI,QAAAJ,MAAAK,EAAA,iCAMOC,QAAQC,KAAK,GALfL,MACAG,IAAO,aAOLD,QAAQJ,MAAMK,EAAO,uBANrBL,QAARO,KAAA,GACS,MACDH,QACAE,MAAAN,IAKAJ,KAAAF,cAAAY,QAAAE,IAAAC,MAAA,QACJC,IAAAC,IAAA,OAAAf,MATJ,IAAAO,OAAAb,KAAAsB,aAAAF,KAcJP,OAAAU,GAAA,QAAAd,cACAI,OAAAU,GAAA,YAAA,WASI,IAAMX,EAAUC,OAAOD,UACjBG,EAA0B,iBAAZH,EAAuB,QAAUA,EAAU,QAAUN,KATvEA,QAAOF,IAAAA,gBAAsBc,KAanCL,OAAOW,OAAOlB","file":"server.min.js","sourcesContent":["/* *** ECRITURE DU SERVEUR ET APPEL DE L'APP *** */\r\n\r\n/* VARIABLES */\r\n\r\n// Importation de http et de l'app\r\nconst http = require('http');\r\nconst app = require('./app');\r\nconst dotenv = require('dotenv').config(); // nécessaire pour faire fonctionner serveur node, doc ici: https://www.freecodecamp.org/news/how-to-use-node-environment-variables-with-a-dotenv-file-for-node-js-and-npm/\r\n\r\n\r\n/* FONCTIONS */\r\n\r\n// Obtention d'un port valide:\r\nconst normalizePort = val => {\r\n    const port = parseInt(val, 10);\r\n\r\n    if (isNaN(port)) {\r\n        return val;\r\n    }\r\n    if (port >= 0) {\r\n        return port;\r\n    }\r\n    return false;\r\n};\r\n\r\n// Gestion des erreurs:\r\nconst errorHandler = error => {\r\n    if (error.syscall !== 'listen') {\r\n        throw error;\r\n    }\r\n    const address = server.address();\r\n    const bind = typeof address === 'string' ? 'pipe' + address : 'port: ' + port;\r\n    switch (error.code) {\r\n        case 'EACCES':\r\n            console.error(bind + 'requires elevated privileges.');\r\n            process.exit(1);\r\n            break;\r\n        case 'EADDRINUSE':\r\n            console.error(bind + ' is already in use.');\r\n            process.exit(1);\r\n            break;\r\n        default:\r\n            throw error;\r\n    }\r\n};\r\n\r\n/* ACTIONS */\r\n// Obtention du port:\r\nconst port = normalizePort(process.env.PORT || '3000');\r\n// Démarrage appli:\r\napp.set('port', port);\r\n// Création serveur:\r\nconst server = http.createServer(app);\r\n\r\nserver.on('error', errorHandler);\r\nserver.on('listening', () => {\r\n    const address = server.address();\r\n    const bind = typeof address === 'string' ? 'pipe ' + address : 'port ' + port;\r\n    console.log('Listening on ' + bind);\r\n});\r\n\r\nserver.listen(port);"]}